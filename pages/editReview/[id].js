import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Head from "next/head";

import styles from "./editReview.module.scss";
import Header from "../../components/header/header";
import toast, { Toaster } from "react-hot-toast";
import Modal from "../../components/modal/modal";

export default function EditReview() {
  const [movie, setMovie] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  const [newReview, setnewReview] = useState({});

  const [deletedStatus, setDeletedStatus] = useState(false);
  const [openModal, setOpenModal] = useState(false);

  const [movieTitle, setMovieTitle] = useState("");
  const [description, setDescription] = useState("");
  const [director, setDirector] = useState("");
  const [movieImg, setMovieImg] = useState("");
  const [review, setReview] = useState("");
  const [stars, setStars] = useState("");

  const router = useRouter();
  const id = router.query.id;

  // console.log(movie);

  useEffect(() => {
    async function addMovie() {
      const requestOptions = {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newReview),
      };
      const api = await fetch(
        "http://localhost:3000/movies/" + id,
        requestOptions
      );
      const data = await api.json();
      setMovie(data.id);
    }

    addMovie();
  }, [newReview, id]);

  useEffect(() => {
    async function loadData() {
      setIsLoading(true);
      const api = await fetch("http://localhost:3000/movies/" + id);
      const result = await api.json();
      setMovie(result);
      setIsLoading(false);
    }
    if (id) {
      loadData();
    }
  }, [id]);

  useEffect(() => {
    async function remove() {
      if (deletedStatus === true) {
        fetch(`http://localhost:3000/movies/${id}`, {
          method: "DELETE",
        }).then((result) => {
          result.json().then((resp) => {
            setMovie(resp);
          });
        });
        toast.success("Review deleted");
      }
    }
    remove();
  }, [id, deletedStatus]);

  function updateReview() {
    const newReview = {
      title: movieTitle,
      description: description,
      stars: stars,
      movieImg: movieImg,
      review: review,
      director: director,
    };

    setnewReview(newReview);
    toast.success("Review edited", { icon: "ðŸ’œ" });
  }

  function deleteReview() {
    openModal ? setOpenModal(false) : setOpenModal(true);
  }

  return (
    <div>
      <Head>
        <title>Edit Review</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />

      <main className={styles.main}>
        {isLoading ? (
          <div>Loading...</div>
        ) : (
          <>
            {deletedStatus ? (
              <div> Review Deleted </div>
            ) : (
              <div className={styles.formContainer}>
                <h3>{movie?.title}</h3>
                <input
                  className={styles.title}
                  defaultValue={movie?.title}
                  placeholder="Title"
                  onChange={(e) => setMovieTitle(e.target.value)}
                  type="text"
                  required
                />
                <input
                  className={styles.stars}
                  defaultValue={movie?.stars}
                  placeholder="Stars"
                  onChange={(e) => setStars(e.target.value)}
                  type="text"
                  required
                />

                <input
                  className={styles.director}
                  defaultValue={movie?.director}
                  placeholder="Director"
                  onChange={(e) => setDirector(e.target.value)}
                  type="text"
                  required
                />
                <input
                  className={styles.poster}
                  defaultValue={movie?.movieImg}
                  placeholder="Poster url"
                  onChange={(e) => setMovieImg(e.target.value)}
                  type="text"
                  required
                />

                <input
                  className={styles.description}
                  defaultValue={movie?.description}
                  placeholder="Description"
                  onChange={(e) => setDescription(e.target.value)}
                  type="text"
                  required
                />
                <input
                  className={styles.review}
                  defaultValue={movie?.review}
                  placeholder="Review"
                  onChange={(e) => setReview(e.target.value)}
                  type="text"
                  required
                />

                <div>
                  <button
                    className={styles.editButton}
                    type="submit"
                    onClick={updateReview}
                    disabled={movieTitle === undefined}
                  >
                    Update
                  </button>

                  <button
                    className={styles.deleteButton}
                    type="submit"
                    onClick={deleteReview}
                    disabled={movieTitle === undefined}
                  >
                    Remove
                  </button>
                </div>

                {openModal && (
                  <Modal
                    setDeletedStatus={setDeletedStatus}
                    deleteReview={deleteReview}
                    setOpenModal={setOpenModal}
                  />
                )}
                <Toaster />
              </div>
            )}
          </>
        )}
      </main>
    </div>
  );
}
